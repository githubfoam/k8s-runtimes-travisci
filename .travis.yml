---
sudo: required
dist: bionic
env:
  global:
  # auto vagrant installation
notifications:
  slack:
    on_failure: always

fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt
fleet_frakti_tasks : &fleet_frakti_tasks
      install:
        - echo $GOPATH
        #Build frakti
        - git clone https://github.com/kubernetes/frakti.git $GOPATH/src/k8s.io/frakti
        - cd $GOPATH/src/k8s.io/frakti
        - go version
        # - sudo make && sudo make install
        # #Install docker and hyperd
        # - sudo apt-get install qemu libvirt0 docker.io -qqy
        # - sudo sh -c "curl -sSL https://hypercontainer.io/install | bash"
        # #Configure hyperd with gRPC endpoint 127.0.0.1:22318
        # - |
        #   cat >/etc/hyper/config <<EOF
        #   # Boot kernel
        #   Kernel=/var/lib/hyper/kernel
        #   # Boot initrd
        #   Initrd=/var/lib/hyper/hyper-initrd.img
        #   # Storage driver for hyperd, valid value includes devicemapper, overlay, and aufs
        #   StorageDriver=overlay
        #   # Hypervisor to run containers and pods, valid values are: libvirt, qemu, kvm, xen
        #   Hypervisor=qemu
        #   # The tcp endpoint of gRPC API
        #   gRPCHost=127.0.0.1:22318
        #   EOF
        # - sudo systemctl restart hyperd
        # #Setup CNI networking using bridge plugin
        # - sudo mkdir -p /etc/cni/net.d  /opt/cni/bin
        # - git clone https://github.com/containernetworking/plugins $GOPATH/src/github.com/containernetworking/plugins
        # - cd $GOPATH/src/github.com/containernetworking/plugins
        # - source ./build.sh
        # - sudo cp bin/* /opt/cni/bin/
        # - |
        #   sudo sh -c 'cat >/etc/cni/net.d/10-mynet.conflist <<-EOF
        #   {
        #       "cniVersion": "0.3.1",
        #       "name": "mynet",
        #       "plugins": [
        #           {
        #               "type": "bridge",
        #               "bridge": "cni0",
        #               "isGateway": true,
        #               "ipMasq": true,
        #               "ipam": {
        #                   "type": "host-local",
        #                   "subnet": "10.30.0.0/16",
        #                   "routes": [
        #                       { "dst": "0.0.0.0/0"   }
        #                   ]
        #               }
        #           },
        #           {
        #               "type": "portmap",
        #               "capabilities": {"portMappings": true},
        #               "snat": true
        #           }
        #       ]
        #   }
        #   EOF'
        # - |
        #   sudo sh -c 'cat >/etc/cni/net.d/99-loopback.conf <<-EOF
        #   {
        #       "cniVersion": "0.3.1",
        #       "type": "loopback"
        #   }
        #   EOF'
        # - frakti --v=3 --logtostderr --listen=/var/run/frakti.sock --hyper-endpoint=127.0.0.1:22318 &  #start frakti
        # #start kubernetes with frakti runtime
        # - cd $GOPATH/src/k8s.io/kubernetes
        # - hack/install-etcd.sh
        # - export PATH=$GOPATH/src/k8s.io/kubernetes/third_party/etcd:${PATH}
        # - export KUBERNETES_PROVIDER=local
        # - export CONTAINER_RUNTIME=remote
        # - export CONTAINER_RUNTIME_ENDPOINT=/var/run/frakti.sock
        # - source hack/local-up-cluster.sh &
        #start using the cluster, open up another terminal and run
        # - cd $GOPATH/src/k8s.io/kubernetes
        # - export KUBECONFIG=/var/run/kubernetes/admin.kubeconfig
        # - cluster/kubectl.sh
fleet_containerd_tasks : &fleet_containerd_tasks
      install:
        - CONTAINERDVERSION="1.3.4"
        - sudo apt-get install -qqy unzip
        - wget https://github.com/containerd/containerd/archive/v$CONTAINERDVERSION.zip
        - unzip v1.3.4.zip
        - ls -lai containerd-$CONTAINERDVERSION
        - echo $(/etc/containerd/config.toml)
        - sudo cp containerd-$CONTAINERDVERSION/containerd.service /etc/systemd/system/containerd.service
        - sudo chmod 644 /etc/systemd/system/containerd.service
        - sudo systemctl start containerd
        - sudo systemctl status containerd
        - sudo containerd config default > /etc/containerd/config.toml
        - echo $(/etc/containerd/config.toml)
        - go build main.go
        - sudo ./main
        # - |
        #   sudo sh -c 'cat >/etc/containerd/config.toml <<-EOF
        #     subreaper = true
        #     oom_score = -999
        #
        #     [debug]
        #             level = "debug"
        #
        #     [metrics]
        #             address = "127.0.0.1:1338"
        #
        #     [plugins.linux]
        #             runtime = "runc"
        #             shim_debug = true
        #   EOF'
        # - containerd config default > /etc/containerd/config.toml #The default configuration can be generated via
fleet_crio_tasks : &fleet_crio_tasks
      install:
        - CRIO_VERSION=1.17
        # - sudo sh -c ". /etc/os-release"
        - '. /etc/os-release'
        - sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x${NAME}_${VERSION_ID}/ /' >/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        - wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/x${NAME}_${VERSION_ID}/Release.key -O- | sudo apt-key add -
        - sudo apt-get update -qq
        - sudo apt-get install -qqy cri-o-${CRIO_VERSION}

matrix:
  fast_finish: true
  include:

    #https://cri-o.io
    # - name: "kubernetes with crio runtime Python 3.7 on bionic amd64"
    #   dist: bionic
    #   addons:
    #        snaps:
    #          - name: minikube
    #            confinement: strict
    #            channel: stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_crio_tasks
    #   after_success:
    #     - deactivate


    #https://containerd.io/docs/getting-started/#starting-containerd
    # - name: "kubernetes with containerd runtime Python 3.7 on bionic amd64"
    #   dist: bionic
    #   addons:
    #        snaps:
    #          - name: minikube
    #            confinement: strict
    #            channel: stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_containerd_tasks
    #   after_success:
    #     - deactivate

    #https://github.com/kubernetes/frakti
    - name: "kubernetes with frakti runtime Python 3.7 on bionic amd64"
      dist: bionic
      env:
        - FORCE_ROOTLESS_INSTALL=1
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_frakti_tasks
      after_success:
        - deactivate
